name: Publish to PyPI

on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
        description: Name of the package to upload
      version:
        required: true
        type: string
        description: Version of the package to upload
      folder:
        required: false
        type: string
        description: Folder where VERSION file is going to be update (default package_name value)
      retag:
        required: false
        type: boolean
        default: false
    secrets:
      username:
        required: true
      password:
        required: true
      repository_url:
        required: false
      github_access_token:
        required: true

env:
  PACKAGE_NAME: ${{ inputs.package_name }}
  PACKAGE_VERSION: ${{ inputs.version }}
  PACKAGE_FOLDER: ${{ inputs.folder }}
  TWINE_USERNAME: ${{ secrets.username }}
  TWINE_PASSWORD: ${{ secrets.password }}
  REPOSITORY_URL: ${{ secrets.repository_url }}
  GITHUB_ACCESS_TOKEN: ${{ secrets.github_access_token }}

jobs:
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Set up checkout fetch depth
        run: |
          if [ "${{ inputs.retag }}" = "true" ]; then
          echo "FETCH_DEPTH=0" >> $GITHUB_ENV
          else
            echo "FETCH_DEPTH=1" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Check repository_url
        if: ${{ env.REPOSITORY_URL != '' }}
        run: echo "TWINE_REPOSITORY_URL=$REPOSITORY_URL" >> $GITHUB_ENV
      - name: Update VERSION file (default)
        if: ${{ env.PACKAGE_FOLDER == '' }}
        run: echo -ne ${PACKAGE_VERSION} > ${PACKAGE_NAME}/VERSION
      - name: Update VERSION file (from folder)
        if: ${{ env.PACKAGE_FOLDER != '' }}
        run: echo -ne ${PACKAGE_VERSION} > ${PACKAGE_FOLDER}/VERSION
      - name: Install, Build and Publish
        run: |
          if [ -f setup.py ]; then
              echo "Install, build and publish (setup.py)" >&2
              pip install setuptools wheel
              python setup.py sdist bdist_wheel
          elif [ -f pyproject.toml ]; then
            echo "Install, build and publish (pyproject.toml)" >&2
            pip install hatch
            echo "Update version in __init__.py with hatch (add also to git)" >&2
            hatch version ${PACKAGE_VERSION}
            git add ${PACKAGE_NAME}/__init__.py
            hatch build
          else
            echo "No setup.py or pyproject.toml found"
            exit 1
          fi
          
          echo "Installing twine..."
          pip install twine
          echo "Uploading dist using twine..."
          twine upload dist/*

      - name: Git - Add VERSION File (default)
        if: ${{ env.PACKAGE_FOLDER == '' }}
        run: git add ${PACKAGE_NAME}/VERSION
      - name: Git - Add VERSION File (from folder)
        if: ${{ env.PACKAGE_FOLDER != '' }}
        run: git add ${PACKAGE_FOLDER}/VERSION
      - name: Git - Commit VERSION File
        run: |
          git config --global user.email "dev@alicebiometrics.com"
          git config --global user.name "Alice Biometrics"
          git commit -m "chore: update version to ${PACKAGE_VERSION}"
      - name: Retag repository
        if: inputs.retag
        run:
          git tag -f v${PACKAGE_VERSION}
      - name: Push changes
        uses: alice-biometrics/github-push-action@master
        with:
          github_token: ${GITHUB_ACCESS_TOKEN}
          branch: main
          tags: ${{ inputs.retag }}
          force: ${{ inputs.retag }}
      - name: Check pip installation
        if: ${{ env.REPOSITORY_URL == '' }}
        run: |
          pip install ${PACKAGE_NAME}==${PACKAGE_VERSION} || true
          pip install ${PACKAGE_NAME}==${PACKAGE_VERSION}

